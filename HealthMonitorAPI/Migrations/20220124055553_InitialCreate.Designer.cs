// <auto-generated />
using System;
using HealthMonitorAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthMonitorAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220124055553_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HealthMonitorAPI.Entities.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MeasurementTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Value2")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementTypeId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("HealthMonitorAPI.Entities.MeasurementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("MeasurementTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A Body Weight Measurement",
                            Name = "Weight",
                            UnitOfMeasure = "kg"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A Blood Pressure Measurement expecing 2 values, the first being SYSTOLIC, the second being DIASTOLIC",
                            Name = "Blood Pressure",
                            UnitOfMeasure = "mm Hg"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A Resting Heart Rate Measurement",
                            Name = "Heart Rate",
                            UnitOfMeasure = "bpm"
                        });
                });

            modelBuilder.Entity("HealthMonitorAPI.Entities.Measurement", b =>
                {
                    b.HasOne("HealthMonitorAPI.Entities.MeasurementType", "MeasurementType")
                        .WithMany()
                        .HasForeignKey("MeasurementTypeId");

                    b.Navigation("MeasurementType");
                });
#pragma warning restore 612, 618
        }
    }
}
